<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox2.Text" xml:space="preserve">
    <value>Taulunohjauksessa tulisi alkuun painaa ”näytä tulostaulunäyttö” näppäintä. 
Tätä painamalla tulee huomautus, että ”haluatko käynnistää odotuskellon” jos käynnistät, tulee jatko-ohjeet, miten saat määritettyä odotusajan, mutta jos painat ”ei” niin taululle tulee jo ensimmäinen neljännes, eikä pysty enää määrittämään alkulämmittelyjen aikaa. 
Kun tulostaulu on avattu, niin pystytään aloittamaan pelin toiminnot. 
Pelaajien pisteet toimivat + tai - näppäimiä painamalla, + näppäin lisää yhden pisteen pelaajalle ja samalla joukkueelle, ja - näppäin vähentää yhden pisteen niin pelaajalta kuin hänen joukkueeltaan. 
Pelaajien virheet näppäimet toimivat täysin samalla tavalla kuin pelaajien pisteet näppäimet. 
”Lisää/vähennä pisteitä pelaajalta ilman, että se vaikuttaa joukkuepisteisiin” tämä kun rastitetaan, niin pystytään muuttamaan joukkueen sisällä pisteiden tekijöitä tarvitsematta säätää joukkueenpisteitä. 
”Lisää/vähennä virheitä pelaajalta ilman, että se vaikuttaa joukkuevirheisiin” toimii täysin samalla tavalla kuin ”Lisää/vähennä pisteitä pelaajalta ilman, että se vaikuttaa joukkuepisteisiin”
”Muuta aikaa” näppäintä painamalla voidaan muuttaa peliaika yllä olevassa tekstikentässä näkyväksi ajaksi.
”Hyökkäys 1” näppäin aloittaa 24s hyökkäysajan.
”Hyökkäys 2” näppäin aloittaa 14s hyökkäysajan. 
”Piilota” piilotta hyökkäysajan.
”Joukkuepisteet” näppäimillä + ja - voidaan lisätä tai vähentää joukkueen pisteitä yksitellen. 
”Joukkuevirheet” näppäimillä + ja - voidaan lisätä tai vähentää joukkueen virheitä yksitellen. 
”Aikalisä” näppäimellä + voidaan aloittaa joukkueen 60s aikalisä.  joukkueen aikalisä niin painetaan -.
Hyökkäysajan alapuolella näkyy ”Sek” tekstikenttä ja ”Muuta” näppäin, niin tällä voidaan manuaalisesti muokata hyökkäysaikaa. Tekstikenttään syötetään haluttu aika ja ”Muuta” näppäintä painamalla se varmistetaan.
Pelikelloa käytetään näppäimillä ”1”, ”2” ja ”3”. Näppäimellä ”1” pelikello käynnistyy, näppäimellä ”2” pelikello pysähtyy ja näppäimellä ”3” se nollaantuu. 
Jotta näkyisi summerin soidessa punaiset reunat pitäisi painaa näppäintä ”Tulostaulunäyttö kokonäytölle/ pois kokonäytöltä”.
</value>
  </data>
  <data name="textBox3.Text" xml:space="preserve">
    <value>”Hae kotijoukkueen pelaajat” näppäintä painamalla pääset etsimään tietokoneeltasi tekstitiedoston, missä pelaajat pitäisi olla listattu allekkain. Samalla rivillä on vain pelaajan numero ja sukunimi. Jos ei ole 12 pelaajaa kokoonpanossa, riville laitetaan ”-” merkki puuttuvan pelaajan merkiksi. 
”Hae vierasjoukkueen pelaajat” toimii samalla tavalla kuin hae kotijoukkueen pelaajat näppäin.
”Kotijoukkueen kuva” näppäintä painamalla pääset etsimään tietokoneeltasi kuvaa. Toimivia kuvamuotoja ovat ainakin .jpg ja .png. Kuvan koolla ei pitäisi olla väliä, koska ne venytetään.
Kun olet saanut molempien joukkueiden kuvat ja kokoonpanot paina ”seuraava” näppäintä ja pääset taulunohjaus ikkunaan. 
</value>
  </data>
  <data name="textBox4.Text" xml:space="preserve">
    <value>Neljänneksien pituuden määritys minuuteissa(min) ja sekunneissa(s)
Neljänneksien määrä 
Jatkoajan pituus minuuteissa ja sekunneissa.
Kellon käyntisuunta
Lyhyt tauko, joka tulee 1,3,4 neljänneksen ja jatkoajan jälkeen. Säätäminen minuuteissa ja sekunneissa.
Pitkä tauko, joka tulee 2.neljänneksen jälkeen. Säätäminen minuuteissa ja sekunneissa.
Aikalisä - sekunneissa.
Aikalisien lukumäärä.
Hyökkäysaika 1 - sekunneissa
Hyökkäysaika 2 - sekunneissa
Virheet 5 säädetty jo maksimiksi.
Pelikellon summeri (kesto 2s) 
Heittokellon summeri (kesto 2s)
Oletusasetukset näppäin säätää nämä kaikki asetukset Suomen koripalloliigan oletusasetuksille.
Seuraava näppäimellä pääset valitsemaan kokoonpanoja.
</value>
  </data>
</root>